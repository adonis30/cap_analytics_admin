generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Update as needed: MySQL, SQLite, etc.
  url      = env("DATABASE_URL")
}

model Department {
  id          String     @id @default(cuid())
  name        String
  description String?
  code        String     @unique
  managerId   String?    @unique
  manager     Employee?  @relation("DepartmentManager", fields: [managerId], references: [id])
  employees   Employee[] @relation("DepartmentEmployees")
  location    String?
  phone       String?
  email       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt

  translations Translation[] @relation("DepartmentTranslations") // Unique relation name
}

model Warehouse {
  id        String    @id @default(cuid())
  name      String
  location  String
  capacity  Int?
  phone     String?
  email     String?
  managerId String?   @unique
  manager   Employee? @relation("WarehouseManager", fields: [managerId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  translations Translation[] @relation("WarehouseTranslations") // Explicit relation name
}

model Employee {
  id           String      @id @default(cuid())
  firstName    String
  lastName     String
  email        String      @unique
  phone        String?
  address      String?
  position     String?
  dateOfBirth  DateTime?
  dateOfHire   DateTime?
  salary       Float?
  isActive     Boolean     @default(true)
  departmentId String?
  department   Department? @relation("DepartmentEmployees", fields: [departmentId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt

  managerOfDepartment Department? @relation("DepartmentManager")
  managerOfWarehouse  Warehouse?  @relation("WarehouseManager")

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  roles               Role[]               @relation("RoleEmployees")
  contract            Contract?
  attendanceRecords   Attendance[]
  payrolls            Payroll[]
  performanceReviews  PerformanceReview[]
  complianceDocuments ComplianceDocument[]
  leaveRequests       LeaveRequest[]
  reviewsGiven        PerformanceReview[]  @relation("Reviewer")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  password        String
  roleId          String // foreign key
  role            Role      @relation(fields: [roleId], references: [id])
  isEmailVerified Boolean   @default(false)
  lastLogin       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  employee Employee?
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  permissions String[]
  employees   Employee[] @relation("RoleEmployees")
  users       User[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @default(now()) @updatedAt

  translations Translation[] @relation("RoleTranslations") // Explicit relation name
}

model Translation {
  id        String   @id @default(cuid())
  locale    String
  entityId  String
  field     String
  value     String
  createdAt DateTime @default(now())

  department    Department?    @relation("DepartmentTranslations", fields: [entityId], references: [id], map: "Translation_department_fk")
  inventoryItem InventoryItem? @relation("InventoryItemTranslations", fields: [entityId], references: [id], map: "Translation_inventoryItem_fk")
  purchaseOrder PurchaseOrder? @relation("PurchaseOrderTranslations", fields: [entityId], references: [id], map: "Translation_purchaseOrder_fk")
  roleEntity    Role?          @relation("RoleTranslations", fields: [entityId], references: [id], map: "Translation_role_fk")
  warehouse     Warehouse?     @relation("WarehouseTranslations", fields: [entityId], references: [id], map: "Translation_warehouse_fk")
}

model InventoryItem {
  id        String   @id @default(cuid())
  name      String
  sku       String   @unique
  quantity  Int
  location  String?
  unitPrice Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  translations Translation[] @relation("InventoryItemTranslations") // Explicit relation name
}

model PurchaseOrder {
  id           String    @id @default(cuid())
  reference    String    @unique
  supplier     String
  orderDate    DateTime
  deliveryDate DateTime?
  totalAmount  Float
  status       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt

  translations Translation[] @relation("PurchaseOrderTranslations") // Explicit relation name
}

model Contract {
  id           String    @id @default(cuid())
  employeeId   String    @unique
  employee     Employee  @relation(fields: [employeeId], references: [id])
  contractType String
  startDate    DateTime
  endDate      DateTime?
  salary       Float?
  benefits     String?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
}

model Attendance {
  id         String    @id @default(cuid())
  employeeId String
  employee   Employee  @relation(fields: [employeeId], references: [id])
  date       DateTime
  checkIn    DateTime?
  checkOut   DateTime?
  status     String
  remarks    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
}

model Payroll {
  id            String        @id @default(cuid())
  employeeId    String
  employee      Employee      @relation(fields: [employeeId], references: [id])
  periodStart   DateTime
  periodEnd     DateTime
  grossSalary   Float
  deductions    Float?
  netSalary     Float
  paymentDate   DateTime?
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model PerformanceReview {
  id          String    @id @default(cuid())
  employeeId  String
  employee    Employee  @relation(fields: [employeeId], references: [id])
  reviewerId  String?
  reviewer    Employee? @relation("Reviewer", fields: [reviewerId], references: [id])
  periodStart DateTime
  periodEnd   DateTime
  score       Float
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model LeaveRequest {
  id         String      @id @default(cuid())
  employeeId String
  employee   Employee    @relation(fields: [employeeId], references: [id])
  startDate  DateTime
  endDate    DateTime
  type       String
  reason     String?
  status     LeaveStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
}

model ComplianceDocument {
  id         String    @id @default(cuid())
  title      String
  type       String
  url        String
  employeeId String
  employee   Employee  @relation(fields: [employeeId], references: [id])
  uploadedAt DateTime  @default(now())
  expiresAt  DateTime?
  isVerified Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
}

model AutomationTask {
  id          String         @id @default(cuid())
  name        String
  description String?
  type        AutomationType
  status      TaskStatus     @default(PENDING)
  schedule    String? // e.g., cron syntax or ISO datetime
  payload     Json?
  lastRun     DateTime?
  nextRun     DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum AutomationType {
  EMAIL_REMINDER
  ONBOARDING
  OFFBOARDING
  PAYROLL_GENERATION
  CONTRACT_RENEWAL_ALERT
  ATTENDANCE_ALERT
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}
